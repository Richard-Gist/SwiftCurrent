@Tutorial(time: 30) {
    @Intro(title: "Core") {
        Core text
    }
    
    @Section(title: "What is a Workflow?") {
        @ContentAndMedia {
            In this section you'll learn what a workflow is under the covers. You'll be walked through LinkedList, _WorkflowItem, FlowRepresentableMetadata, AnyWorkflow.PassedArgs, and Workflow.
        }
        
        @Steps {
            @Step {
                Start with LinkedList, all workflows end up being doubly linked lists so this data type is a great starting point. You'll notice that it partially mimics Swift sequence types, but is not a struct. This is somewhat deliberate, we rely on inheritance logic and did not design this type so that anyone could use LinkedList outside of SwiftCurrent.
                
                @Code(name: "LinkedList.swift", file: "LinkedList.swift", reset: true)
            }
            
            @Step {
                LinkedList has nodes, they are value types that hold onto references for the previous and next items. They also have methods for traversing the list, starting at the current node.
                
                @Code(name: "LinkedListNode.swift", file: "LinkedListNode.swift", reset: true)
            }
            
            @Step {
                As mentioned already, a Workflow is a doubly linked list. Each node in a workflow is a `_WorkflowItem`. These nodes hold onto 2 important things. The first is the `FlowRepresentableMetadata` for the node. We will explore that in the next step. The next is just an instance of the `AnyFlowRepresentable` if one was loaded.
                
                @Code(name: "_WorkflowItem.swift", file: "_WorkflowItem.swift", reset: true)
            }
            
            @Step {
                This metadata is the primary means by which items in a workflow are created. It holds onto a factory to create `AnyFlowRepresentable` references from passed in arguments. It also holds onto peripheral items like the persistence and launch style of a given `FlowRepresentable`.
                
                @Code(name: "FlowRepresentableMetadata.swift", file: "FlowRepresentableMetadata.swift", reset: true)
            }
            
            @Step {
                In the previous example it's noticeable that the factory and persistence require an `AnyWorkflow.PassedArgs` type. This type is almost identical to `Optional` but was specifically created to remove ambiguity. If we had used `Optional` it would've been unclear to consumers if an item in a workflow as passing `nil` as an argument, or if there were no arguments passed.
                
                @Code(name: "PassedArgs.swift", file: "PassedArgs.swift", reset: true)
            }
        }
    }
}
